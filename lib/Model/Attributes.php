<?php
/**
 * Attributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Meli
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meli\Model;

use \ArrayAccess;
use \Meli\ObjectSerializer;

/**
 * Attributes Class Doc Comment
 *
 * @category Class
 * @package  Meli
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Attributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'value_id' => 'string',
        'value_name' => 'string',
        'value_struct' => '\Meli\Model\AttributesValueStruct',
        'values' => '\Meli\Model\AttributesValues[]',
        'attribute_group_id' => 'string',
        'attribute_group_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'value_id' => null,
        'value_name' => null,
        'value_struct' => null,
        'values' => null,
        'attribute_group_id' => null,
        'attribute_group_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'value_id' => 'value_id',
        'value_name' => 'value_name',
        'value_struct' => 'value_struct',
        'values' => 'values',
        'attribute_group_id' => 'attribute_group_id',
        'attribute_group_name' => 'attribute_group_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'value_id' => 'setValueId',
        'value_name' => 'setValueName',
        'value_struct' => 'setValueStruct',
        'values' => 'setValues',
        'attribute_group_id' => 'setAttributeGroupId',
        'attribute_group_name' => 'setAttributeGroupName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'value_id' => 'getValueId',
        'value_name' => 'getValueName',
        'value_struct' => 'getValueStruct',
        'values' => 'getValues',
        'attribute_group_id' => 'getAttributeGroupId',
        'attribute_group_name' => 'getAttributeGroupName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['value_id'] = isset($data['value_id']) ? $data['value_id'] : null;
        $this->container['value_name'] = isset($data['value_name']) ? $data['value_name'] : null;
        $this->container['value_struct'] = isset($data['value_struct']) ? $data['value_struct'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['attribute_group_id'] = isset($data['attribute_group_id']) ? $data['attribute_group_id'] : null;
        $this->container['attribute_group_name'] = isset($data['attribute_group_name']) ? $data['attribute_group_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets value_id
     *
     * @return string|null
     */
    public function getValueId()
    {
        return $this->container['value_id'];
    }

    /**
     * Sets value_id
     *
     * @param string|null $value_id value_id
     *
     * @return $this
     */
    public function setValueId($value_id)
    {
        $this->container['value_id'] = $value_id;

        return $this;
    }

    /**
     * Gets value_name
     *
     * @return string|null
     */
    public function getValueName()
    {
        return $this->container['value_name'];
    }

    /**
     * Sets value_name
     *
     * @param string|null $value_name value_name
     *
     * @return $this
     */
    public function setValueName($value_name)
    {
        $this->container['value_name'] = $value_name;

        return $this;
    }

    /**
     * Gets value_struct
     *
     * @return \Meli\Model\AttributesValueStruct|null
     */
    public function getValueStruct()
    {
        return $this->container['value_struct'];
    }

    /**
     * Sets value_struct
     *
     * @param \Meli\Model\AttributesValueStruct|null $value_struct value_struct
     *
     * @return $this
     */
    public function setValueStruct($value_struct)
    {
        $this->container['value_struct'] = $value_struct;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \Meli\Model\AttributesValues[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \Meli\Model\AttributesValues[]|null $values values
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets attribute_group_id
     *
     * @return string|null
     */
    public function getAttributeGroupId()
    {
        return $this->container['attribute_group_id'];
    }

    /**
     * Sets attribute_group_id
     *
     * @param string|null $attribute_group_id attribute_group_id
     *
     * @return $this
     */
    public function setAttributeGroupId($attribute_group_id)
    {
        $this->container['attribute_group_id'] = $attribute_group_id;

        return $this;
    }

    /**
     * Gets attribute_group_name
     *
     * @return string|null
     */
    public function getAttributeGroupName()
    {
        return $this->container['attribute_group_name'];
    }

    /**
     * Sets attribute_group_name
     *
     * @param string|null $attribute_group_name attribute_group_name
     *
     * @return $this
     */
    public function setAttributeGroupName($attribute_group_name)
    {
        $this->container['attribute_group_name'] = $attribute_group_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


